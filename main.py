import math


def maclaurin_sin(x, n=10):
    """
    Вычисление sin(x) через разложение в ряд Маклорена.

    Короткое описание:
    Расчёт приближённого значения синуса через первые n членов ряда Маклорена.

    Подробное описание:
    Формула ряда Маклорена для sin(x):
        sin(x) = Σ((-1)^k * x^(2k + 1)) / (2k + 1)!
    где k = 0, 1, 2, ..., n-1.

    Аргументы:
        x (float): Угол в радианах.
        n (int): Количество членов ряда (по умолчанию 10).

    Возвращаемое значение:
        float: Приближённое значение sin(x).

    Исключения:
        Не генерирует исключений.

    Пример использования:
        >>> maclaurin_sin(3.14159)
        2.65358979335273e-06
    """
    result = 0
    for k in range(n):
        result += ((-1)**k * x**(2*k + 1)) / math.factorial(2*k + 1)
    return result


def maclaurin_ln_1_minus_x(x, n=10):
    """
    Вычисление ln(1 - x) через разложение в ряд Маклорена.

    Короткое описание:
    Расчёт натурального логарифма (1 - x) через первые n членов ряда Маклорена.

    Подробное описание:
    Формула ряда Маклорена для ln(1 - x):
        ln(1 - x) = -Σ(x^k / k) для k = 1, 2, ..., n.

    Аргументы:
        x (float): Значение переменной (|x| < 1).
        n (int): Количество членов ряда (по умолчанию 10).

    Возвращаемое значение:
        float: Приближённое значение ln(1 - x).

    Исключения:
        ValueError: Если |x| >= 1.

    Пример использования:
        >>> maclaurin_ln_1_minus_x(0.5)
        -0.6931471805599453
    """
    if abs(x) >= 1:
        raise ValueError("Значение x должно быть в диапазоне |x| < 1.")
    result = 0
    for k in range(1, n + 1):
        result -= x**k / k
    return result


def maclaurin_1_plus_x_pow_m(x, m, n=10):
    """
    Вычисление (1 + x)^m через разложение в ряд Маклорена.

    Короткое описание:
    Расчёт приближённого значения (1 + x)^m через первые n членов ряда Маклорена.

    Подробное описание:
    Формула ряда Маклорена для (1 + x)^m:
        (1 + x)^m = 1 + Σ[m(m-1)...(m-k+1) * x^k / k!]
    для k = 1, 2, ..., n-1.

    Аргументы:
        x (float): Значение переменной (|x| < 1).
        m (float): Показатель степени.
        n (int): Количество членов ряда (по умолчанию 10).

    Возвращаемое значение:
        float: Приближённое значение (1 + x)^m.

    Исключения:
        ValueError: Если |x| >= 1.

    Пример использования:
        >>> maclaurin_1_plus_x_pow_m(0.5, 2)
        2.25
    """
    if abs(x) >= 1:
        raise ValueError("Значение x должно быть в диапазоне |x| < 1.")
    result = 1  # Первое слагаемое
    term = 1  # Для вычисления каждого следующего члена ряда
    for k in range(1, n):
        term *= (m - (k - 1)) * x / k
        result += term
    return result


def maclaurin_exp(x, n=10):
    """
    Вычисление e^x через разложение в ряд Маклорена.

    Короткое описание:
    Расчёт приближённого значения e^x через первые n членов ряда Маклорена.

    Подробное описание:
    Формула ряда Маклорена для e^x:
        e^x = Σ(x^k / k!) для k = 0, 1, ..., n-1.

    Аргументы:
        x (float): Значение переменной.
        n (int): Количество членов ряда (по умолчанию 10).

    Возвращаемое значение:
        float: Приближённое значение e^x.

    Исключения:
        Не генерирует исключений.

    Пример использования:
        >>> maclaurin_exp(1)
        2.7182818011463845
    """
    result = 0
    for k in range(n):
        result += x**k / math.factorial(k)
    return result


def maclaurin_ln_1_plus_x(x, n=10):
    """
    Вычисление ln(1 + x) через разложение в ряд Маклорена.

    Короткое описание:
    Расчёт натурального логарифма (1 + x) через первые n членов ряда Маклорена.

    Подробное описание:
    Формула ряда Маклорена для ln(1 + x):
        ln(1 + x) = Σ((-1)^(k+1) * x^k) / k для k = 1, 2, ..., n.

    Аргументы:
        x (float): Значение переменной (|x| < 1).
        n (int): Количество членов ряда (по умолчанию 10).

    Возвращаемое значение:
        float: Приближённое значение ln(1 + x).

    Исключения:
        ValueError: Если |x| >= 1.

    Пример использования:
        >>> maclaurin_ln_1_plus_x(0.5)
        0.4054651081081644
    """
    if abs(x) >= 1:
        raise ValueError("Значение x должно быть в диапазоне |x| < 1.")
    result = 0
    for k in range(1, n + 1):
        result += ((-1)**(k + 1) * x**k) / k
    return result


def maclaurin_1_minus_x_pow_m(x, m, n=10):
    """
    Вычисление (1 - x)^m через разложение в ряд Маклорена.

    Короткое описание:
    Расчёт приближённого значения (1 - x)^m через первые n членов ряда Маклорена.

    Подробное описание:
    Формула ряда Маклорена для (1 - x)^m:
        (1 - x)^m = 1 + Σ[m(m-1)...(m-k+1) * (-x)^k / k!]
    для k = 1, 2, ..., n-1.

    Аргументы:
        x (float): Значение переменной (|x| < 1).
        m (float): Показатель степени.
        n (int): Количество членов ряда (по умолчанию 10).

    Возвращаемое значение:
        float: Приближённое значение (1 - x)^m.

    Исключения:
        ValueError: Если |x| >= 1.

    Пример использования:
        >>> maclaurin_1_minus_x_pow_m(0.5, 2)
        0.5625
    """
    if abs(x) >= 1:
        raise ValueError("Значение x должно быть в диапазоне |x| < 1.")
    result = 1
    term = 1
    for k in range(1, n):
        term *= (m - (k - 1)) * (-x) / k
        result += term
    return result


def main():
    while True:
        print("Меню:")
        print("1. Вычислить sin(x)")
        print("2. Вычислить ln(1 - x)")
        print("3. Вычислить (1 + x)^m")
        print("4. Вычислить e^x")
        print("5. Вычислить ln(1 + x)")
        print("6. Вычислить (1 - x)^m")
        print("7. Выход")

        choice = input("Введите номер функции (1-7): ")

        if choice == "7":
            print("Выход из программы.")
            break
        elif choice == "1":
            try:
                x = float(input("Введите значение x: "))
                print("sin(x) =", maclaurin_sin(x))
            except ValueError:
                print("Ошибка: Введите корректное значение x.")
        elif choice == "2":
            try:
                x = float(input("Введите значение x (|x| < 1): "))
                print("ln(1 - x) =", maclaurin_ln_1_minus_x(x))
            except ValueError as e:
                print("Ошибка:", e)
        elif choice == "3":
            try:
                x = float(input("Введите значение x (|x| < 1): "))
                m = float(input("Введите значение m: "))
                print("(1 + x)^m =", maclaurin_1_plus_x_pow_m(x, m))
            except ValueError as e:
                print("Ошибка:", e)
        elif choice == "4":
            try:
                x = float(input("Введите значение x: "))
                print("e^x =", maclaurin_exp(x))
            except ValueError:
                print("Ошибка: Введите корректное значение x.")
        elif choice == "5":
            try:
                x = float(input("Введите значение x (|x| < 1): "))
                print("ln(1 + x) =", maclaurin_ln_1_plus_x(x))
            except ValueError as e:
                print("Ошибка:", e)
        elif choice == "6":
            try:
                x = float(input("Введите значение x (|x| < 1): "))
                m = float(input("Введите значение m: "))
                print("(1 - x)^m =", maclaurin_1_minus_x_pow_m(x, m))
            except ValueError as e:
                print("Ошибка:", e)
        else:
            print("Неверный выбор. Попробуйте снова.")


if __name__ == "__main__":
    main()
